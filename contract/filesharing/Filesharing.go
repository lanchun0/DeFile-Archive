// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package filesharing

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Metedata is an auto generated low-level Go binding around an user-defined struct.
type Metedata struct {
	FileName  string
	Size      *big.Int
	Timestamp string
}

// OffFile is an auto generated low-level Go binding around an user-defined struct.
type OffFile struct {
	FileID          string
	HashDigest      string
	Owner           string
	MeteData        Metedata
	PermissionLevel uint8
	PermissionList  []PermissionList
	Signature       string
}

// PermissionList is an auto generated low-level Go binding around an user-defined struct.
type PermissionList struct {
	PublicKey  string
	Permission uint8
}

// FilesharingMetaData contains all meta data concerning the Filesharing contract.
var FilesharingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_behavior\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_owner\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_pL\",\"type\":\"uint8\"}],\"name\":\"CreateFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_reader\",\"type\":\"string\"}],\"name\":\"ReadFile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"_writer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_digest\",\"type\":\"string\"}],\"name\":\"WriteFile\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_to\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_perm\",\"type\":\"uint8\"}],\"name\":\"addPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_reader\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"}],\"name\":\"canRead\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_writer\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"}],\"name\":\"canWrite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_digest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_owner\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_pL\",\"type\":\"uint8\"}],\"name\":\"createFile\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"}],\"name\":\"existFile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFileCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"}],\"name\":\"queryFile\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"fileID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashDigest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"timestamp\",\"type\":\"string\"}],\"internalType\":\"structMetedata\",\"name\":\"meteData\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"permissionLevel\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"permission\",\"type\":\"uint8\"}],\"internalType\":\"structPermissionList[]\",\"name\":\"permissionList\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"internalType\":\"structOffFile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_index\",\"type\":\"uint64\"}],\"name\":\"queryFileByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"fileID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashDigest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"timestamp\",\"type\":\"string\"}],\"internalType\":\"structMetedata\",\"name\":\"meteData\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"permissionLevel\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"permission\",\"type\":\"uint8\"}],\"internalType\":\"structPermissionList[]\",\"name\":\"permissionList\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"internalType\":\"structOffFile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pub\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"}],\"name\":\"readFile\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"fileID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hashDigest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"owner\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"fileName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"timestamp\",\"type\":\"string\"}],\"internalType\":\"structMetedata\",\"name\":\"meteData\",\"type\":\"tuple\"},{\"internalType\":\"uint8\",\"name\":\"permissionLevel\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"permission\",\"type\":\"uint8\"}],\"internalType\":\"structPermissionList[]\",\"name\":\"permissionList\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"}],\"internalType\":\"structOffFile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pub\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_digest\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_signature\",\"type\":\"string\"}],\"name\":\"writeFile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pub\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileID\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fileName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_time\",\"type\":\"string\"}],\"name\":\"writeMeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// FilesharingABI is the input ABI used to generate the binding from.
// Deprecated: Use FilesharingMetaData.ABI instead.
var FilesharingABI = FilesharingMetaData.ABI

// FilesharingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FilesharingMetaData.Bin instead.
var FilesharingBin = FilesharingMetaData.Bin

// DeployFilesharing deploys a new Ethereum contract, binding an instance of Filesharing to it.
func DeployFilesharing(auth *bind.TransactOpts, backend bind.ContractBackend, _behavior common.Address) (common.Address, *types.Transaction, *Filesharing, error) {
	parsed, err := FilesharingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FilesharingBin), backend, _behavior)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Filesharing{FilesharingCaller: FilesharingCaller{contract: contract}, FilesharingTransactor: FilesharingTransactor{contract: contract}, FilesharingFilterer: FilesharingFilterer{contract: contract}}, nil
}

// Filesharing is an auto generated Go binding around an Ethereum contract.
type Filesharing struct {
	FilesharingCaller     // Read-only binding to the contract
	FilesharingTransactor // Write-only binding to the contract
	FilesharingFilterer   // Log filterer for contract events
}

// FilesharingCaller is an auto generated read-only Go binding around an Ethereum contract.
type FilesharingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesharingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FilesharingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesharingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FilesharingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FilesharingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FilesharingSession struct {
	Contract     *Filesharing      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FilesharingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FilesharingCallerSession struct {
	Contract *FilesharingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// FilesharingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FilesharingTransactorSession struct {
	Contract     *FilesharingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FilesharingRaw is an auto generated low-level Go binding around an Ethereum contract.
type FilesharingRaw struct {
	Contract *Filesharing // Generic contract binding to access the raw methods on
}

// FilesharingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FilesharingCallerRaw struct {
	Contract *FilesharingCaller // Generic read-only contract binding to access the raw methods on
}

// FilesharingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FilesharingTransactorRaw struct {
	Contract *FilesharingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFilesharing creates a new instance of Filesharing, bound to a specific deployed contract.
func NewFilesharing(address common.Address, backend bind.ContractBackend) (*Filesharing, error) {
	contract, err := bindFilesharing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Filesharing{FilesharingCaller: FilesharingCaller{contract: contract}, FilesharingTransactor: FilesharingTransactor{contract: contract}, FilesharingFilterer: FilesharingFilterer{contract: contract}}, nil
}

// NewFilesharingCaller creates a new read-only instance of Filesharing, bound to a specific deployed contract.
func NewFilesharingCaller(address common.Address, caller bind.ContractCaller) (*FilesharingCaller, error) {
	contract, err := bindFilesharing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FilesharingCaller{contract: contract}, nil
}

// NewFilesharingTransactor creates a new write-only instance of Filesharing, bound to a specific deployed contract.
func NewFilesharingTransactor(address common.Address, transactor bind.ContractTransactor) (*FilesharingTransactor, error) {
	contract, err := bindFilesharing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FilesharingTransactor{contract: contract}, nil
}

// NewFilesharingFilterer creates a new log filterer instance of Filesharing, bound to a specific deployed contract.
func NewFilesharingFilterer(address common.Address, filterer bind.ContractFilterer) (*FilesharingFilterer, error) {
	contract, err := bindFilesharing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FilesharingFilterer{contract: contract}, nil
}

// bindFilesharing binds a generic wrapper to an already deployed contract.
func bindFilesharing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FilesharingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Filesharing *FilesharingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Filesharing.Contract.FilesharingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Filesharing *FilesharingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filesharing.Contract.FilesharingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Filesharing *FilesharingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Filesharing.Contract.FilesharingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Filesharing *FilesharingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Filesharing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Filesharing *FilesharingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Filesharing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Filesharing *FilesharingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Filesharing.Contract.contract.Transact(opts, method, params...)
}

// CanRead is a free data retrieval call binding the contract method 0x9d33fbbd.
//
// Solidity: function canRead(string _reader, string _fileID) view returns(bool)
func (_Filesharing *FilesharingCaller) CanRead(opts *bind.CallOpts, _reader string, _fileID string) (bool, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "canRead", _reader, _fileID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanRead is a free data retrieval call binding the contract method 0x9d33fbbd.
//
// Solidity: function canRead(string _reader, string _fileID) view returns(bool)
func (_Filesharing *FilesharingSession) CanRead(_reader string, _fileID string) (bool, error) {
	return _Filesharing.Contract.CanRead(&_Filesharing.CallOpts, _reader, _fileID)
}

// CanRead is a free data retrieval call binding the contract method 0x9d33fbbd.
//
// Solidity: function canRead(string _reader, string _fileID) view returns(bool)
func (_Filesharing *FilesharingCallerSession) CanRead(_reader string, _fileID string) (bool, error) {
	return _Filesharing.Contract.CanRead(&_Filesharing.CallOpts, _reader, _fileID)
}

// CanWrite is a free data retrieval call binding the contract method 0x1269d357.
//
// Solidity: function canWrite(string _writer, string _fileID) view returns(bool)
func (_Filesharing *FilesharingCaller) CanWrite(opts *bind.CallOpts, _writer string, _fileID string) (bool, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "canWrite", _writer, _fileID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanWrite is a free data retrieval call binding the contract method 0x1269d357.
//
// Solidity: function canWrite(string _writer, string _fileID) view returns(bool)
func (_Filesharing *FilesharingSession) CanWrite(_writer string, _fileID string) (bool, error) {
	return _Filesharing.Contract.CanWrite(&_Filesharing.CallOpts, _writer, _fileID)
}

// CanWrite is a free data retrieval call binding the contract method 0x1269d357.
//
// Solidity: function canWrite(string _writer, string _fileID) view returns(bool)
func (_Filesharing *FilesharingCallerSession) CanWrite(_writer string, _fileID string) (bool, error) {
	return _Filesharing.Contract.CanWrite(&_Filesharing.CallOpts, _writer, _fileID)
}

// ExistFile is a free data retrieval call binding the contract method 0x29ae4e26.
//
// Solidity: function existFile(string _fileID) view returns(bool)
func (_Filesharing *FilesharingCaller) ExistFile(opts *bind.CallOpts, _fileID string) (bool, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "existFile", _fileID)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistFile is a free data retrieval call binding the contract method 0x29ae4e26.
//
// Solidity: function existFile(string _fileID) view returns(bool)
func (_Filesharing *FilesharingSession) ExistFile(_fileID string) (bool, error) {
	return _Filesharing.Contract.ExistFile(&_Filesharing.CallOpts, _fileID)
}

// ExistFile is a free data retrieval call binding the contract method 0x29ae4e26.
//
// Solidity: function existFile(string _fileID) view returns(bool)
func (_Filesharing *FilesharingCallerSession) ExistFile(_fileID string) (bool, error) {
	return _Filesharing.Contract.ExistFile(&_Filesharing.CallOpts, _fileID)
}

// GetFileCount is a free data retrieval call binding the contract method 0xbab50cc9.
//
// Solidity: function getFileCount() view returns(uint64)
func (_Filesharing *FilesharingCaller) GetFileCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "getFileCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetFileCount is a free data retrieval call binding the contract method 0xbab50cc9.
//
// Solidity: function getFileCount() view returns(uint64)
func (_Filesharing *FilesharingSession) GetFileCount() (uint64, error) {
	return _Filesharing.Contract.GetFileCount(&_Filesharing.CallOpts)
}

// GetFileCount is a free data retrieval call binding the contract method 0xbab50cc9.
//
// Solidity: function getFileCount() view returns(uint64)
func (_Filesharing *FilesharingCallerSession) GetFileCount() (uint64, error) {
	return _Filesharing.Contract.GetFileCount(&_Filesharing.CallOpts)
}

// GetUserCount is a free data retrieval call binding the contract method 0xb5cb15f7.
//
// Solidity: function getUserCount() view returns(uint64)
func (_Filesharing *FilesharingCaller) GetUserCount(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "getUserCount")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetUserCount is a free data retrieval call binding the contract method 0xb5cb15f7.
//
// Solidity: function getUserCount() view returns(uint64)
func (_Filesharing *FilesharingSession) GetUserCount() (uint64, error) {
	return _Filesharing.Contract.GetUserCount(&_Filesharing.CallOpts)
}

// GetUserCount is a free data retrieval call binding the contract method 0xb5cb15f7.
//
// Solidity: function getUserCount() view returns(uint64)
func (_Filesharing *FilesharingCallerSession) GetUserCount() (uint64, error) {
	return _Filesharing.Contract.GetUserCount(&_Filesharing.CallOpts)
}

// QueryFile is a free data retrieval call binding the contract method 0xb512671f.
//
// Solidity: function queryFile(string _fileID) view returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingCaller) QueryFile(opts *bind.CallOpts, _fileID string) (OffFile, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "queryFile", _fileID)

	if err != nil {
		return *new(OffFile), err
	}

	out0 := *abi.ConvertType(out[0], new(OffFile)).(*OffFile)

	return out0, err

}

// QueryFile is a free data retrieval call binding the contract method 0xb512671f.
//
// Solidity: function queryFile(string _fileID) view returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingSession) QueryFile(_fileID string) (OffFile, error) {
	return _Filesharing.Contract.QueryFile(&_Filesharing.CallOpts, _fileID)
}

// QueryFile is a free data retrieval call binding the contract method 0xb512671f.
//
// Solidity: function queryFile(string _fileID) view returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingCallerSession) QueryFile(_fileID string) (OffFile, error) {
	return _Filesharing.Contract.QueryFile(&_Filesharing.CallOpts, _fileID)
}

// QueryFileByIndex is a free data retrieval call binding the contract method 0xb936f143.
//
// Solidity: function queryFileByIndex(uint64 _index) view returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingCaller) QueryFileByIndex(opts *bind.CallOpts, _index uint64) (OffFile, error) {
	var out []interface{}
	err := _Filesharing.contract.Call(opts, &out, "queryFileByIndex", _index)

	if err != nil {
		return *new(OffFile), err
	}

	out0 := *abi.ConvertType(out[0], new(OffFile)).(*OffFile)

	return out0, err

}

// QueryFileByIndex is a free data retrieval call binding the contract method 0xb936f143.
//
// Solidity: function queryFileByIndex(uint64 _index) view returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingSession) QueryFileByIndex(_index uint64) (OffFile, error) {
	return _Filesharing.Contract.QueryFileByIndex(&_Filesharing.CallOpts, _index)
}

// QueryFileByIndex is a free data retrieval call binding the contract method 0xb936f143.
//
// Solidity: function queryFileByIndex(uint64 _index) view returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingCallerSession) QueryFileByIndex(_index uint64) (OffFile, error) {
	return _Filesharing.Contract.QueryFileByIndex(&_Filesharing.CallOpts, _index)
}

// AddPermission is a paid mutator transaction binding the contract method 0x965dc420.
//
// Solidity: function addPermission(string _from, string _to, string _fileID, uint8 _perm) returns(bool)
func (_Filesharing *FilesharingTransactor) AddPermission(opts *bind.TransactOpts, _from string, _to string, _fileID string, _perm uint8) (*types.Transaction, error) {
	return _Filesharing.contract.Transact(opts, "addPermission", _from, _to, _fileID, _perm)
}

// AddPermission is a paid mutator transaction binding the contract method 0x965dc420.
//
// Solidity: function addPermission(string _from, string _to, string _fileID, uint8 _perm) returns(bool)
func (_Filesharing *FilesharingSession) AddPermission(_from string, _to string, _fileID string, _perm uint8) (*types.Transaction, error) {
	return _Filesharing.Contract.AddPermission(&_Filesharing.TransactOpts, _from, _to, _fileID, _perm)
}

// AddPermission is a paid mutator transaction binding the contract method 0x965dc420.
//
// Solidity: function addPermission(string _from, string _to, string _fileID, uint8 _perm) returns(bool)
func (_Filesharing *FilesharingTransactorSession) AddPermission(_from string, _to string, _fileID string, _perm uint8) (*types.Transaction, error) {
	return _Filesharing.Contract.AddPermission(&_Filesharing.TransactOpts, _from, _to, _fileID, _perm)
}

// CreateFile is a paid mutator transaction binding the contract method 0x44466899.
//
// Solidity: function createFile(string _fileID, string _digest, string _owner, uint8 _pL) returns(uint64)
func (_Filesharing *FilesharingTransactor) CreateFile(opts *bind.TransactOpts, _fileID string, _digest string, _owner string, _pL uint8) (*types.Transaction, error) {
	return _Filesharing.contract.Transact(opts, "createFile", _fileID, _digest, _owner, _pL)
}

// CreateFile is a paid mutator transaction binding the contract method 0x44466899.
//
// Solidity: function createFile(string _fileID, string _digest, string _owner, uint8 _pL) returns(uint64)
func (_Filesharing *FilesharingSession) CreateFile(_fileID string, _digest string, _owner string, _pL uint8) (*types.Transaction, error) {
	return _Filesharing.Contract.CreateFile(&_Filesharing.TransactOpts, _fileID, _digest, _owner, _pL)
}

// CreateFile is a paid mutator transaction binding the contract method 0x44466899.
//
// Solidity: function createFile(string _fileID, string _digest, string _owner, uint8 _pL) returns(uint64)
func (_Filesharing *FilesharingTransactorSession) CreateFile(_fileID string, _digest string, _owner string, _pL uint8) (*types.Transaction, error) {
	return _Filesharing.Contract.CreateFile(&_Filesharing.TransactOpts, _fileID, _digest, _owner, _pL)
}

// ReadFile is a paid mutator transaction binding the contract method 0xa27104f0.
//
// Solidity: function readFile(string _pub, string _fileID) returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingTransactor) ReadFile(opts *bind.TransactOpts, _pub string, _fileID string) (*types.Transaction, error) {
	return _Filesharing.contract.Transact(opts, "readFile", _pub, _fileID)
}

// ReadFile is a paid mutator transaction binding the contract method 0xa27104f0.
//
// Solidity: function readFile(string _pub, string _fileID) returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingSession) ReadFile(_pub string, _fileID string) (*types.Transaction, error) {
	return _Filesharing.Contract.ReadFile(&_Filesharing.TransactOpts, _pub, _fileID)
}

// ReadFile is a paid mutator transaction binding the contract method 0xa27104f0.
//
// Solidity: function readFile(string _pub, string _fileID) returns((string,string,string,(string,uint256,string),uint8,(string,uint8)[],string))
func (_Filesharing *FilesharingTransactorSession) ReadFile(_pub string, _fileID string) (*types.Transaction, error) {
	return _Filesharing.Contract.ReadFile(&_Filesharing.TransactOpts, _pub, _fileID)
}

// WriteFile is a paid mutator transaction binding the contract method 0x69d4030b.
//
// Solidity: function writeFile(string _pub, string _fileID, string _digest, string _signature) returns(bool)
func (_Filesharing *FilesharingTransactor) WriteFile(opts *bind.TransactOpts, _pub string, _fileID string, _digest string, _signature string) (*types.Transaction, error) {
	return _Filesharing.contract.Transact(opts, "writeFile", _pub, _fileID, _digest, _signature)
}

// WriteFile is a paid mutator transaction binding the contract method 0x69d4030b.
//
// Solidity: function writeFile(string _pub, string _fileID, string _digest, string _signature) returns(bool)
func (_Filesharing *FilesharingSession) WriteFile(_pub string, _fileID string, _digest string, _signature string) (*types.Transaction, error) {
	return _Filesharing.Contract.WriteFile(&_Filesharing.TransactOpts, _pub, _fileID, _digest, _signature)
}

// WriteFile is a paid mutator transaction binding the contract method 0x69d4030b.
//
// Solidity: function writeFile(string _pub, string _fileID, string _digest, string _signature) returns(bool)
func (_Filesharing *FilesharingTransactorSession) WriteFile(_pub string, _fileID string, _digest string, _signature string) (*types.Transaction, error) {
	return _Filesharing.Contract.WriteFile(&_Filesharing.TransactOpts, _pub, _fileID, _digest, _signature)
}

// WriteMeta is a paid mutator transaction binding the contract method 0x16db5834.
//
// Solidity: function writeMeta(string _pub, string _fileID, string _fileName, uint256 _size, string _time) returns(bool)
func (_Filesharing *FilesharingTransactor) WriteMeta(opts *bind.TransactOpts, _pub string, _fileID string, _fileName string, _size *big.Int, _time string) (*types.Transaction, error) {
	return _Filesharing.contract.Transact(opts, "writeMeta", _pub, _fileID, _fileName, _size, _time)
}

// WriteMeta is a paid mutator transaction binding the contract method 0x16db5834.
//
// Solidity: function writeMeta(string _pub, string _fileID, string _fileName, uint256 _size, string _time) returns(bool)
func (_Filesharing *FilesharingSession) WriteMeta(_pub string, _fileID string, _fileName string, _size *big.Int, _time string) (*types.Transaction, error) {
	return _Filesharing.Contract.WriteMeta(&_Filesharing.TransactOpts, _pub, _fileID, _fileName, _size, _time)
}

// WriteMeta is a paid mutator transaction binding the contract method 0x16db5834.
//
// Solidity: function writeMeta(string _pub, string _fileID, string _fileName, uint256 _size, string _time) returns(bool)
func (_Filesharing *FilesharingTransactorSession) WriteMeta(_pub string, _fileID string, _fileName string, _size *big.Int, _time string) (*types.Transaction, error) {
	return _Filesharing.Contract.WriteMeta(&_Filesharing.TransactOpts, _pub, _fileID, _fileName, _size, _time)
}

// FilesharingCreateFileIterator is returned from FilterCreateFile and is used to iterate over the raw logs and unpacked data for CreateFile events raised by the Filesharing contract.
type FilesharingCreateFileIterator struct {
	Event *FilesharingCreateFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesharingCreateFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesharingCreateFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesharingCreateFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesharingCreateFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesharingCreateFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesharingCreateFile represents a CreateFile event raised by the Filesharing contract.
type FilesharingCreateFile struct {
	FileID common.Hash
	Owner  common.Hash
	PL     uint8
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterCreateFile is a free log retrieval operation binding the contract event 0xd251ae86dca5d728d3c1b91ecb007179b2d05112ed96f25126b414a9248965d2.
//
// Solidity: event CreateFile(string indexed _fileID, string indexed _owner, uint8 _pL)
func (_Filesharing *FilesharingFilterer) FilterCreateFile(opts *bind.FilterOpts, _fileID []string, _owner []string) (*FilesharingCreateFileIterator, error) {

	var _fileIDRule []interface{}
	for _, _fileIDItem := range _fileID {
		_fileIDRule = append(_fileIDRule, _fileIDItem)
	}
	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}

	logs, sub, err := _Filesharing.contract.FilterLogs(opts, "CreateFile", _fileIDRule, _ownerRule)
	if err != nil {
		return nil, err
	}
	return &FilesharingCreateFileIterator{contract: _Filesharing.contract, event: "CreateFile", logs: logs, sub: sub}, nil
}

// WatchCreateFile is a free log subscription operation binding the contract event 0xd251ae86dca5d728d3c1b91ecb007179b2d05112ed96f25126b414a9248965d2.
//
// Solidity: event CreateFile(string indexed _fileID, string indexed _owner, uint8 _pL)
func (_Filesharing *FilesharingFilterer) WatchCreateFile(opts *bind.WatchOpts, sink chan<- *FilesharingCreateFile, _fileID []string, _owner []string) (event.Subscription, error) {

	var _fileIDRule []interface{}
	for _, _fileIDItem := range _fileID {
		_fileIDRule = append(_fileIDRule, _fileIDItem)
	}
	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}

	logs, sub, err := _Filesharing.contract.WatchLogs(opts, "CreateFile", _fileIDRule, _ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesharingCreateFile)
				if err := _Filesharing.contract.UnpackLog(event, "CreateFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreateFile is a log parse operation binding the contract event 0xd251ae86dca5d728d3c1b91ecb007179b2d05112ed96f25126b414a9248965d2.
//
// Solidity: event CreateFile(string indexed _fileID, string indexed _owner, uint8 _pL)
func (_Filesharing *FilesharingFilterer) ParseCreateFile(log types.Log) (*FilesharingCreateFile, error) {
	event := new(FilesharingCreateFile)
	if err := _Filesharing.contract.UnpackLog(event, "CreateFile", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FilesharingReadFileIterator is returned from FilterReadFile and is used to iterate over the raw logs and unpacked data for ReadFile events raised by the Filesharing contract.
type FilesharingReadFileIterator struct {
	Event *FilesharingReadFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesharingReadFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesharingReadFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesharingReadFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesharingReadFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesharingReadFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesharingReadFile represents a ReadFile event raised by the Filesharing contract.
type FilesharingReadFile struct {
	FileID common.Hash
	Reader common.Hash
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterReadFile is a free log retrieval operation binding the contract event 0x6ef805992bc5caaddb8f19571e9cb59863f3ff81dfcf3b0fa85fe906686c98b6.
//
// Solidity: event ReadFile(string indexed _fileID, string indexed _reader)
func (_Filesharing *FilesharingFilterer) FilterReadFile(opts *bind.FilterOpts, _fileID []string, _reader []string) (*FilesharingReadFileIterator, error) {

	var _fileIDRule []interface{}
	for _, _fileIDItem := range _fileID {
		_fileIDRule = append(_fileIDRule, _fileIDItem)
	}
	var _readerRule []interface{}
	for _, _readerItem := range _reader {
		_readerRule = append(_readerRule, _readerItem)
	}

	logs, sub, err := _Filesharing.contract.FilterLogs(opts, "ReadFile", _fileIDRule, _readerRule)
	if err != nil {
		return nil, err
	}
	return &FilesharingReadFileIterator{contract: _Filesharing.contract, event: "ReadFile", logs: logs, sub: sub}, nil
}

// WatchReadFile is a free log subscription operation binding the contract event 0x6ef805992bc5caaddb8f19571e9cb59863f3ff81dfcf3b0fa85fe906686c98b6.
//
// Solidity: event ReadFile(string indexed _fileID, string indexed _reader)
func (_Filesharing *FilesharingFilterer) WatchReadFile(opts *bind.WatchOpts, sink chan<- *FilesharingReadFile, _fileID []string, _reader []string) (event.Subscription, error) {

	var _fileIDRule []interface{}
	for _, _fileIDItem := range _fileID {
		_fileIDRule = append(_fileIDRule, _fileIDItem)
	}
	var _readerRule []interface{}
	for _, _readerItem := range _reader {
		_readerRule = append(_readerRule, _readerItem)
	}

	logs, sub, err := _Filesharing.contract.WatchLogs(opts, "ReadFile", _fileIDRule, _readerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesharingReadFile)
				if err := _Filesharing.contract.UnpackLog(event, "ReadFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReadFile is a log parse operation binding the contract event 0x6ef805992bc5caaddb8f19571e9cb59863f3ff81dfcf3b0fa85fe906686c98b6.
//
// Solidity: event ReadFile(string indexed _fileID, string indexed _reader)
func (_Filesharing *FilesharingFilterer) ParseReadFile(log types.Log) (*FilesharingReadFile, error) {
	event := new(FilesharingReadFile)
	if err := _Filesharing.contract.UnpackLog(event, "ReadFile", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FilesharingWriteFileIterator is returned from FilterWriteFile and is used to iterate over the raw logs and unpacked data for WriteFile events raised by the Filesharing contract.
type FilesharingWriteFileIterator struct {
	Event *FilesharingWriteFile // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FilesharingWriteFileIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FilesharingWriteFile)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FilesharingWriteFile)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FilesharingWriteFileIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FilesharingWriteFileIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FilesharingWriteFile represents a WriteFile event raised by the Filesharing contract.
type FilesharingWriteFile struct {
	FileID common.Hash
	Writer common.Hash
	Digest string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWriteFile is a free log retrieval operation binding the contract event 0xbc8d4babe357bdb368934d0ea038829d7ad97458a6e2062e6977c6e86241239f.
//
// Solidity: event WriteFile(string indexed _fileID, string indexed _writer, string _digest)
func (_Filesharing *FilesharingFilterer) FilterWriteFile(opts *bind.FilterOpts, _fileID []string, _writer []string) (*FilesharingWriteFileIterator, error) {

	var _fileIDRule []interface{}
	for _, _fileIDItem := range _fileID {
		_fileIDRule = append(_fileIDRule, _fileIDItem)
	}
	var _writerRule []interface{}
	for _, _writerItem := range _writer {
		_writerRule = append(_writerRule, _writerItem)
	}

	logs, sub, err := _Filesharing.contract.FilterLogs(opts, "WriteFile", _fileIDRule, _writerRule)
	if err != nil {
		return nil, err
	}
	return &FilesharingWriteFileIterator{contract: _Filesharing.contract, event: "WriteFile", logs: logs, sub: sub}, nil
}

// WatchWriteFile is a free log subscription operation binding the contract event 0xbc8d4babe357bdb368934d0ea038829d7ad97458a6e2062e6977c6e86241239f.
//
// Solidity: event WriteFile(string indexed _fileID, string indexed _writer, string _digest)
func (_Filesharing *FilesharingFilterer) WatchWriteFile(opts *bind.WatchOpts, sink chan<- *FilesharingWriteFile, _fileID []string, _writer []string) (event.Subscription, error) {

	var _fileIDRule []interface{}
	for _, _fileIDItem := range _fileID {
		_fileIDRule = append(_fileIDRule, _fileIDItem)
	}
	var _writerRule []interface{}
	for _, _writerItem := range _writer {
		_writerRule = append(_writerRule, _writerItem)
	}

	logs, sub, err := _Filesharing.contract.WatchLogs(opts, "WriteFile", _fileIDRule, _writerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FilesharingWriteFile)
				if err := _Filesharing.contract.UnpackLog(event, "WriteFile", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWriteFile is a log parse operation binding the contract event 0xbc8d4babe357bdb368934d0ea038829d7ad97458a6e2062e6977c6e86241239f.
//
// Solidity: event WriteFile(string indexed _fileID, string indexed _writer, string _digest)
func (_Filesharing *FilesharingFilterer) ParseWriteFile(log types.Log) (*FilesharingWriteFile, error) {
	event := new(FilesharingWriteFile)
	if err := _Filesharing.contract.UnpackLog(event, "WriteFile", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

